#!/usr/bin/env python3
"""
Environment Setup Script for NutriPattern AI
This script helps you create a secure .env file with your credentials.
"""

import os

def create_env_file():
    """Create .env file with Supabase credentials"""
    
    print("🔐 SUPABASE CREDENTIALS SETUP")
    print("=" * 50)
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("⚠️  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").lower()
        if response != 'y':
            print("❌ Setup cancelled.")
            return
    
    print("\n📝 Please provide your Supabase credentials:")
    print("(You can find these in your Supabase dashboard)")
    
    # Get Supabase URL
    supabase_url = input("\n🔗 Supabase URL: ").strip()
    if not supabase_url:
        supabase_url = "https://qvswoxihuzbjexnuaxdl.supabase.co"
        print(f"Using default URL: {supabase_url}")
    
    # Get Supabase Anon Key
    supabase_key = input("🔑 Supabase Anon Key: ").strip()
    if not supabase_key:
        supabase_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF2c3dveGlodXpiamV4bnVheGRsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA3NTUsImV4cCI6MjA3NTY5Njc1NX0.8WRFFX6LkqA2h8ZQ7Z_aF_wRa4YTXaed187tkwCUJZM"
        print("Using default key")
    
    # Get other credentials
    secret_key = input("🔐 Flask Secret Key (press Enter for random): ").strip()
    if not secret_key:
        import secrets
        secret_key = secrets.token_hex(32)
        print(f"Generated random secret key: {secret_key}")
    
    openrouter_key = input("🤖 OpenRouter API Key (optional): ").strip()
    
    # Create .env content
    env_content = f"""# Environment Variables for NutriPattern AI
# Generated by setup script

# Flask Configuration
SECRET_KEY={secret_key}
DATABASE_URL=sqlite:///healthapp.db

# Supabase Configuration
SUPABASE_URL={supabase_url}
SUPABASE_ANON_KEY={supabase_key}

# OpenRouter API (for chatbot)
OPENROUTER_API_KEY={openrouter_key}
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n✅ .env file created successfully!")
        print("🔒 Your credentials are now secure and won't be committed to Git")
        
        # Test the connection
        print("\n🧪 Testing Supabase connection...")
        try:
            from supabase_config import get_supabase_client
            supabase = get_supabase_client()
            print("✅ Supabase connection successful!")
        except Exception as e:
            print(f"❌ Supabase connection failed: {e}")
            
    except Exception as e:
        print(f"❌ Failed to create .env file: {e}")

if __name__ == "__main__":
    create_env_file()
